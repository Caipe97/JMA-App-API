{"version":3,"sources":["records.controller.js"],"names":["db","require","Record","records","Op","Sequelize","exports","create","req","res","console","log","body","foodName","gramAmount","dateEaten","userID","status","send","message","aDate","Date","err","record","parseInt","then","data","catch","findAll","query","condition","where","findOne","id","params","findByPk","update","num","delete","destroy","deletedRecordID"],"mappings":"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","file":"records.controller.js","sourceRoot":"/home/manuel/Desktop/ProyIntegral/app/controllers","sourcesContent":["const db = require(\"../models\");\nconst Record = db.records;\nconst Op = db.Sequelize.Op;\n\n// Create and Save a new Record\nexports.create = (req, res) => {\n   // Validate request\n   console.log(req.body);\n   if (!req.body.foodName || !req.body.gramAmount || !req.body.dateEaten || !req.body.userID ) {\n    \n    res.status(400).send({\n      message: \"Content can not be empty!\"\n    });\n    return;\n  }\n    //Check date format\n    try{\n      let aDate = new Date(req.body.dateEaten);\n    }\n    catch (err){\n      res.status(400).send({\n        message: \"Bad Date Format\"\n      });\n      return;\n    };\n\n  // Create a Record\n  const record = {\n    foodName: req.body.foodName,\n    gramAmount: parseInt(req.body.gramAmount),\n    userID: parseInt(req.body.userID),\n    dateEaten: new Date(req.body.dateEaten),\n  };\n\n  // Save Record in the database\n  Record.create(record)\n    .then(data => {\n      res.send(data);\n    })\n    .catch(err => {\n      res.status(500).send({\n        message:\n          err.message || \"Error while creating new Record.\"\n      });\n    });\n};\n\n// Retrieve all Records from the database. CAMBIAR PARA HACER UN RETRIEVE SEGUN UN USERID\nexports.findAll = (req, res) => {\n    const userID = req.query.userID;\n    //console.log(req);\n    var condition = {userID: userID};\n  \n    Record.findAll({ where: condition })\n      .then(data => {\n        res.send(data);\n      })\n      .catch(err => {\n        res.status(500).send({\n          message:\n            err.message || \"Error while retrieving Records.\"\n        });\n      });\n};\n\n// Find a single Record with an id\nexports.findOne = (req, res) => {\n    const id = req.params.id;\n\n    Record.findByPk(id)\n      .then(data => {\n        res.send(data);\n      })\n      .catch(err => {\n        res.status(500).send({\n          message: \"Error retrieving Record with id=\" + id\n        });\n      });\n};\n\n// Update a Record by the id in the request\nexports.update = (req, res) => {\n    const id = req.body.id;\n\n    Record.update(req.body, {\n      where: { id: id }\n    })\n      .then(num => {\n        if (num == 1) {\n          res.send({\n            message: \"Record was updated successfully.\"\n          });\n        } else {\n          res.send({\n            message: `Cannot update Record with id=${id}. Maybe Record was not found or req.body is empty!`\n          });\n        }\n      })\n      .catch(err => {\n        res.status(500).send({\n          message: \"Error updating Record with id=\" + id\n        });\n      });\n};\n\n// Delete a Record with the specified id in the request\nexports.delete = (req, res) => {\n    console.log(req);\n    const id = req.body.id;\n\n    Record.destroy({\n      where: { id: id }\n    })\n      .then(num => {\n        if (num == 1) {\n          res.send({\n            message: \"Record was deleted successfully!\",\n            deletedRecordID: id,\n          });\n        } else {\n          console.log(num);\n          res.send({\n            message: `Cannot delete Record with id=${id}. Maybe Record was not found!`\n          });\n        }\n      })\n      .catch(err => {\n        res.status(500).send({\n          message: \"Could not delete User with id=\" + id\n        });\n      });\n};\n\n"]}