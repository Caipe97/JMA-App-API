{"version":3,"sources":["index.js"],"names":["fs","require","deployType","readFileSync","console","log","toString","e","stack","dbConfig","Sequelize","sequelize","DB","USER","PASSWORD","host","HOST","dialect","operatorsAliases","pool","max","min","acquire","idle","storage","dialectOptions","db","users","foods","records","module","exports"],"mappings":"AAAA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,UAAJ;;AAEA,IAAG;AACDA,eAAaF,GAAGG,YAAH,CAAgB,kBAAhB,EAAoC,MAApC,CAAb;AACAC,UAAQC,GAAR,CAAY,QAAZ,EAAsBH,WAAWI,QAAX,EAAtB;AACAJ,eAAaA,WAAWI,QAAX,EAAb;AACD,CAJD,CAKA,OAAMC,CAAN,EAAQ;AACNH,UAAQC,GAAR,CAAY,SAAZ,EAAuBE,EAAEC,KAAzB;AACD;;AAED,MAAMC,WAAWR,QAAQ,wBAAR,CAAjB;;AAEA,MAAMS,YAAYT,QAAQ,WAAR,CAAlB;AACA,IAAIU,SAAJ;;AAEA,QAAQT,UAAR;AACE,OAAK,MAAL;AACES,gBAAY,IAAID,SAAJ,CAAcD,SAASG,EAAvB,EAA2BH,SAASI,IAApC,EAA0CJ,SAASK,QAAnD,EAA6D;AACvEC,YAAMN,SAASO,IADwD;AAEvEC,eAASR,SAASQ,OAFqD;AAGvEC,wBAAkB,KAHqD;AAIvE;AACAC,YAAM;AACJC,aAAKX,SAASU,IAAT,CAAcC,GADf;AAEJC,aAAKZ,SAASU,IAAT,CAAcE,GAFf;AAGJC,iBAASb,SAASU,IAAT,CAAcG,OAHnB;AAIJC,cAAMd,SAASU,IAAT,CAAcI;AAJhB,OALiE;AAWvEC,eAAS;AAX8D,KAA7D,CAAZ;AAaA;AACF;AACEb,gBAAY,IAAID,SAAJ,CAAcD,SAASG,EAAvB,EAA2BH,SAASI,IAApC,EAA0CJ,SAASK,QAAnD,EAA6D;AACvEC,YAAMN,SAASO,IADwD;AAEvEC,eAASR,SAASQ,OAFqD;AAGvEC,wBAAkB,KAHqD;AAIvEO,sBAAgBhB,SAASgB,cAJ8C;AAKvEN,YAAM;AACJC,aAAKX,SAASU,IAAT,CAAcC,GADf;AAEJC,aAAKZ,SAASU,IAAT,CAAcE,GAFf;AAGJC,iBAASb,SAASU,IAAT,CAAcG,OAHnB;AAIJC,cAAMd,SAASU,IAAT,CAAcI;AAJhB;AALiE,KAA7D,CAAZ;;AAjBJ;;AAiCA,MAAMG,KAAK,EAAX;;AAEAA,GAAGhB,SAAH,GAAeA,SAAf;AACAgB,GAAGf,SAAH,GAAeA,SAAf;;AAEAe,GAAGC,KAAH,GAAW1B,QAAQ,iBAAR,EAA2BU,SAA3B,EAAsCD,SAAtC,CAAX;AACAgB,GAAGE,KAAH,GAAW3B,QAAQ,iBAAR,EAA2BU,SAA3B,EAAsCD,SAAtC,CAAX;AACAgB,GAAGG,OAAH,GAAa5B,QAAQ,mBAAR,EAA6BU,SAA7B,EAAwCD,SAAxC,CAAb;;AAGAoB,OAAOC,OAAP,GAAiBL,EAAjB","file":"index.js","sourceRoot":"/home/manuel/Desktop/ProyIntegral/app/models","sourcesContent":["var fs = require('fs');\nvar deployType;\n\ntry{\n  deployType = fs.readFileSync('./deployType.txt', 'utf8');\n  console.log(\"Data: \", deployType.toString());\n  deployType = deployType.toString();\n}\ncatch(e){\n  console.log('Error: ', e.stack);\n}\n\nconst dbConfig = require(\"../config/db.config.js\");\n\nconst Sequelize = require(\"sequelize\");\nvar sequelize;\n\nswitch (deployType){\n  case 'test':\n    sequelize = new Sequelize(dbConfig.DB, dbConfig.USER, dbConfig.PASSWORD, {\n      host: dbConfig.HOST,\n      dialect: dbConfig.dialect,\n      operatorsAliases: false,\n      //dialectOptions: dbConfig.dialectOptions,\n      pool: {\n        max: dbConfig.pool.max,\n        min: dbConfig.pool.min,\n        acquire: dbConfig.pool.acquire,\n        idle: dbConfig.pool.idle\n      },\n      storage: './db/test.db'\n    });\n    break;\n  default:\n    sequelize = new Sequelize(dbConfig.DB, dbConfig.USER, dbConfig.PASSWORD, {\n      host: dbConfig.HOST,\n      dialect: dbConfig.dialect,\n      operatorsAliases: false,\n      dialectOptions: dbConfig.dialectOptions,\n      pool: {\n        max: dbConfig.pool.max,\n        min: dbConfig.pool.min,\n        acquire: dbConfig.pool.acquire,\n        idle: dbConfig.pool.idle\n      }\n    })\n\n\n}\n\nconst db = {};\n\ndb.Sequelize = Sequelize;\ndb.sequelize = sequelize;\n\ndb.users = require(\"./user.model.js\")(sequelize, Sequelize);\ndb.foods = require(\"./food.model.js\")(sequelize, Sequelize);\ndb.records = require(\"./record.model.js\")(sequelize, Sequelize);\n\n\nmodule.exports = db;\n"]}