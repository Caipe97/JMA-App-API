{"version":3,"sources":["foods.controller.js"],"names":["db","require","Food","foods","Op","Sequelize","exports","create","req","res","body","name","status","send","message","food","then","data","catch","err","findAll","query","condition","iLike","where","findOne","id","findByPk","update","num","delete","destroy","deleteAll","truncate","nums"],"mappings":"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","file":"foods.controller.js","sourceRoot":"/home/manuel/Desktop/ProyIntegral/app/controllers","sourcesContent":["const db = require(\"../models\");\nconst Food = db.foods;\nconst Op = db.Sequelize.Op;\n\n// Create and Save a new Food\nexports.create = (req, res) => {\n   // Validate request\n   if (!req.body.name ) {\n    res.status(400).send({\n      message: \"Content can not be empty!\"\n    });\n    return;\n  }\n\n  // Create a Food\n  const food = {\n    name: req.body.name,\n  };\n\n  // Save Food in the database\n  Food.create(food)\n    .then(data => {\n      res.send(data);\n    })\n    .catch(err => {\n      res.status(500).send({\n        message:\n          err.message || \"Error while creating new Food.\"\n      });\n    });\n};\n\n// Retrieve all Foods from the database.\nexports.findAll = (req, res) => {\n    const name = req.query.name;\n    var condition = name ? { name: { [Op.iLike]: `%${name}%` } } : null;\n  \n    Food.findAll({ where: condition })\n      .then(data => {\n        res.send(data);\n      })\n      .catch(err => {\n        res.status(500).send({\n          message:\n            err.message || \"Error while retrieving foods.\"\n        });\n      });\n};\n\n// Find a single food with an id\nexports.findOne = (req, res) => {\n    const id = req.body.id;\n\n    Food.findByPk(id)\n      .then(data => {\n        res.send(data);\n      })\n      .catch(err => {\n        res.status(500).send({\n          message: \"Error retrieving food with id=\" + id\n        });\n      });\n};\n\n// Update a Food by the id in the request\nexports.update = (req, res) => {\n    const id = req.body.id;\n\n    Food.update(req.body, {\n      where: { id: id }\n    })\n      .then(num => {\n        if (num == 1) {\n          res.send({\n            message: \"Food was updated successfully.\"\n          });\n        } else {\n          res.send({\n            message: `Cannot update Food with id=${id}. Maybe Food was not found or req.body is empty!`\n          });\n        }\n      })\n      .catch(err => {\n        res.status(500).send({\n          message: \"Error updating Food with id=\" + id\n        });\n      });\n};\n\n// Delete a Food with the specified id in the request\nexports.delete = (req, res) => {\n    const id = req.body.id;\n\n    Food.destroy({\n      where: { id: id }\n    })\n      .then(num => {\n        if (num == 1) {\n          res.send({\n            message: \"Food was deleted successfully!\"\n          });\n        } else {\n          res.send({\n            message: `Cannot delete Food with id=${id}. Maybe Food was not found!`\n          });\n        }\n      })\n      .catch(err => {\n        res.status(500).send({\n          message: \"Could not delete User with id=\" + id\n        });\n      });\n};\n\n// Delete all Foods from the database.\nexports.deleteAll = (req, res) => {\n    Food.destroy({\n        where: {},\n        truncate: false\n      })\n        .then(nums => {\n          res.send({ message: `${nums} Foods were deleted successfully!` });\n        })\n        .catch(err => {\n          res.status(500).send({\n            message:\n              err.message || \"Some error occurred while removing all Foods.\"\n          });\n        });\n};\n\n"]}