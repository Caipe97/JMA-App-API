{"version":3,"sources":["server.js"],"names":["express","require","bodyParser","cors","db","app","chai","chaiHttp","use","fs","deployType","readFileSync","console","log","toString","e","stack","corsOptions","origin","dropDB","sequelize","sync","force","then","json","urlencoded","extended","get","req","res","message","module","exports","PORT","process","env","listen"],"mappings":"AAAA,MAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,MAAMC,aAAaD,QAAQ,aAAR,CAAnB;AACA,MAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,MAAMG,KAAKH,QAAQ,cAAR,CAAX;AACA,MAAMI,MAAML,SAAZ;;AAEA,IAAIM,OAAOL,QAAQ,MAAR,CAAX;AACA,IAAIM,WAAWN,QAAQ,WAAR,CAAf;AACA;;AAEAK,KAAKE,GAAL,CAASD,QAAT;;AAEA,IAAIE,KAAKR,QAAQ,IAAR,CAAT;AACA,IAAIS,aAAa,MAAjB,C,CAAyB;;AAEzB,IAAG;AACDA,eAAaD,GAAGE,YAAH,CAAgB,kBAAhB,EAAoC,MAApC,CAAb;AACAC,UAAQC,GAAR,CAAY,QAAZ,EAAsBH,WAAWI,QAAX,EAAtB;AACAJ,eAAaA,WAAWI,QAAX,EAAb;AACD,CAJD,CAKA,OAAMC,CAAN,EAAQ;AACNH,UAAQC,GAAR,CAAY,WAAZ,EAAyBE,EAAEC,KAA3B;AACD;;AAID,IAAIC,cAAc;AAChBC,UAAQ;AADQ,CAAlB;;AAIA,MAAMC,SAAS,CAAf;;AAEA,QAAQA,MAAR;AACE,OAAK,CAAL;AACIf,OAAGgB,SAAH,CAAaC,IAAb,CAAkB,EAAEC,OAAO,IAAT,EAAlB,EAAmCC,IAAnC,CAAwC,MAAM;AAC5CX,cAAQC,GAAR,CAAY,sBAAZ;AACD,KAFD;AAGJ;;AAEIT,OAAGgB,SAAH,CAAaC,IAAb,GAAoBE,IAApB,CAAyB,MAAM;AAC7BX,cAAQC,GAAR,CAAY,UAAZ;AACD,KAFD;AAPN;;AAYA;AACAR,IAAIG,GAAJ,CAAQL,MAAR;;AAEA;AACAE,IAAIG,GAAJ,CAAQR,QAAQwB,IAAR,EAAR;;AAEA;AACAnB,IAAIG,GAAJ,CAAQR,QAAQyB,UAAR,CAAmB,EAAEC,UAAU,IAAZ,EAAnB,CAAR;;AAEA;AACArB,IAAIsB,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,MAAIL,IAAJ,CAAS,EAAEM,SAAS,oBAAX,EAAT;AACD,CAFD;;AAKAzB,IAAIG,GAAJ,CAAQ,YAAR,EAAsBP,QAAQ,0BAAR,CAAtB;AACAI,IAAIG,GAAJ,CAAQ,YAAR,EAAsBP,QAAQ,0BAAR,CAAtB;AACAI,IAAIG,GAAJ,CAAQ,cAAR,EAAwBP,QAAQ,4BAAR,CAAxB;;AAEA8B,OAAOC,OAAP,GAAiB3B,GAAjB;;AAEA;AACA;AACA;AACA;AACA,MAAM4B,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AACA5B,IAAI+B,MAAJ,CAAWH,IAAX,EAAiB,MAAM;AACrBrB,UAAQC,GAAR,CAAa,6BAA4BoB,IAAK,GAA9C;AACD,CAFD","file":"server.js","sourceRoot":"/home/manuel/Desktop/ProyIntegral","sourcesContent":["const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst db = require(\"./app/models\");\nconst app = express();\n\nlet chai = require('chai');\nlet chaiHttp = require('chai-http');\n//const expect = require('chai').expect;\n\nchai.use(chaiHttp);\n\nvar fs = require('fs');\nvar deployType = 'test'; //si falla el leer deployType.txt, ese es el valor por defecto\n\ntry{\n  deployType = fs.readFileSync('./deployType.txt', 'utf8');\n  console.log(\"Data: \", deployType.toString());\n  deployType = deployType.toString();\n}\ncatch(e){\n  console.log('WARNING: ', e.stack);\n}\n\n\n\nvar corsOptions = {\n  origin: \"http://localhost:8081\"\n};\n\nconst dropDB = 0;\n\nswitch (dropDB){\n  case 1:\n      db.sequelize.sync({ force: true }).then(() => {\n        console.log(\"Drop and re-sync db.\");\n      });\n  default:\n\n      db.sequelize.sync().then(() => {\n        console.log(\"sync db.\");\n      });\n}\n\n//app.use(cors(corsOptions));\napp.use(cors());\n\n// parse requests of content-type - application/json\napp.use(express.json());\n\n// parse requests of content-type - application/x-www-form-urlencoded\napp.use(express.urlencoded({ extended: true }));\n\n// simple route\napp.get(\"/\", (req, res) => {\n  res.json({ message: \"API JMA Group Ltd.\" });\n});\n\n\napp.use('/api/users', require('./app/routes/user.routes'));\napp.use('/api/foods', require('./app/routes/food.routes'));\napp.use('/api/records', require('./app/routes/record.routes'));\n\nmodule.exports = app;\n\n//require(\"./app/routes/user.routes\")(app);\n//require(\"./app/routes/record.routes\")(app);\n//require(\"./app/routes/food.routes\")(app);\n// set port, listen for requests\nconst PORT = process.env.PORT || 8080;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}.`);\n});\n\n\n"]}