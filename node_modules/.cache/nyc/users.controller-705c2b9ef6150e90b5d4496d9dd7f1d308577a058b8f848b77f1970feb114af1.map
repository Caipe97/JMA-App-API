{"version":3,"sources":["users.controller.js"],"names":["db","require","User","users","Op","Sequelize","exports","create","req","res","body","name","surname","email","password","gender","weight","height","birthday","status","send","message","aDate","Date","err","user","then","data","catch","findAll","query","condition","iLike","where","findOne","id","findByPk","update","params","console","log","num","delete","destroy","deleteAll","truncate","nums","login","toString"],"mappings":"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","file":"users.controller.js","sourceRoot":"/home/manuel/Desktop/ProyIntegral/app/controllers","sourcesContent":["const db = require(\"../models\");\nconst User = db.users;\nconst Op = db.Sequelize.Op;\n\n// Create and Save a new User\nexports.create = (req, res) => {\n   // Validate request\n  if (!req.body.name || !req.body.surname || !req.body.email || !req.body.password || !req.body.gender || !req.body.weight || !req.body.height || !req.body.birthday) {\n\n    res.status(400).send({\n      message: \"Content can not be empty!\"\n    });\n    return\n  }\n    //Check date format\n  try{\n    let aDate = new Date(req.body.birthday);\n  }\n  catch (err){\n    res.status(400).send({\n      message: \"Bad Date Format\"\n    });\n    return;\n  };\n\n  // Create a User\n  const user = {\n    name: req.body.name,\n    surname: req.body.surname,\n    email: req.body.email,\n    password: req.body.password,\n    birthday: new Date(req.body.birthday),\n    gender: req.body.gender,\n    weight: req.body.weight,\n    height: req.body.height\n  };\n\n  // Save User in the database\n  User.create(user)\n    .then(data => {\n      res.send(data);\n    })\n    .catch(err => {\n      res.status(500).send({\n        message:\n          err.message || \"Error while creating new User.\"\n      });\n    });\n};\n\n// Retrieve all Users from the database.\nexports.findAll = (req, res) => {\n    const name = req.query.name;\n    var condition = name ? { name: { [Op.iLike]: `%${name}%` } } : null;\n  \n    User.findAll({ where: condition })\n      .then(data => {\n        res.send(data);\n      })\n      .catch(err => {\n        res.status(500).send({\n          message:\n            err.message || \"Error while retrieving users.\"\n        });\n      });\n};\n\n// Find a single name with an id\nexports.findOne = (req, res) => {\n    const id = req.body.id;\n\n    User.findByPk(id)\n      .then(data => {\n        res.send(data);\n      })\n      .catch(err => {\n        res.status(500).send({\n          message: \"Error retrieving user with id=\" + id\n        });\n      });\n};\n\n// Update a User by the id in the request\nexports.update = (req, res) => {\n    const id = req.params.id;\n\n    console.log(id);\n\n    User.update(req.body, {\n      where: { id: id }\n    })\n      .then(num => {\n        if (num == 1) {\n          res.send({\n            message: \"User was updated successfully.\"\n          });\n        } else {\n          res.send({\n            message: `Cannot update User with id=${id}. Maybe User was not found or req.body is empty!`\n          });\n        }\n      })\n      .catch(err => {\n        res.status(500).send({\n          message: \"Error updating User with id=\" + id\n        });\n      });\n};\n\n// Delete a User with the specified id in the request\nexports.delete = (req, res) => {\n  console.log(req);\n    const id = req.params.id;\n\n    User.destroy({\n      where: { id: id }\n    })\n      .then(num => {\n        if (num == 1) {\n          res.send({\n            message: \"User was deleted successfully!\"\n          });\n        } else {\n          res.send({\n            message: `Cannot delete User with id=${id}. Maybe User was not found!`\n          });\n        }\n      })\n      .catch(err => {\n        res.status(500).send({\n          message: \"Could not delete User with id=\" + id\n        });\n      });\n};\n\n// Delete all Tutorials from the database.\nexports.deleteAll = (req, res) => {\n    User.destroy({\n        where: {},\n        truncate: false\n      })\n        .then(nums => {\n          res.send({ message: `${nums} Tutorials were deleted successfully!` });\n        })\n        .catch(err => {\n          res.status(500).send({\n            message:\n              err.message || \"Some error occurred while removing all tutorials.\"\n          });\n        });\n};\n\n// Log in a user\nexports.login = (req, res) => {\n  console.log(req.body);\n  if (!req.body.email || !req.body.password ) {\n    res.status(400).send({\n      message: \"Login credentials incomplete\"\n    });\n    return;\n  }\n  const email = req.body.email;\n  const password = (req.body.password).toString();\n\n  User.findOne({ where: { email: email, password: password } })\n    .then(data => {\n      res.send(data); //envio el perfil del usuario...\n    })\n    .catch(err => {\n      res.status(500).send({\n        message: \"Error logging user\"\n      });\n    });\n};\n"]}